(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{170:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return h})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return f}));var a=n(2),i=n(7),o=n(0),r=n.n(o),c=n(173),s=n(178),d=(n(157),n(308));var l=({children:e,title:t})=>{const[n,a]=Object(o.useState)(!1),[i,c]=Object(o.useState)("header round-header");return r.a.createElement("div",{className:"disable-user-select"},r.a.createElement("div",{onClick:()=>{a(!n),c(n?"header round-header":"header")},className:i},null!=t?t:"Answer"),r.a.createElement(d.a,{in:n,timeout:400,classNames:"fade",unmountOnExit:!0,onEnter:()=>a(!0),onExited:()=>a(!1)},r.a.createElement("div",{key:"answer",className:"toggle-base"},e)))},h={id:"js",title:"Javascript Questions",sidebar_label:"Javascript"},b={id:"questions/js",isDocsHomePage:!1,title:"Javascript Questions",description:"\ud83d\udd38 Are semicolons required in JavaScript?",source:"@site/docs/questions/js.md",permalink:"/docs/questions/js",lastUpdatedBy:"Abhin Pai",lastUpdatedAt:1595344149,sidebar_label:"Javascript",sidebar:"docs",previous:{title:" ",permalink:"/docs/"},next:{title:"\ud83d\udee1 Javascript Battalion  \ud83d\udee1",permalink:"/docs/javascript/js_index"}},u=[{value:"\ud83d\udd38 Are semicolons required in JavaScript?",id:"-are-semicolons-required-in-javascript",children:[]},{value:"\ud83d\udd38 Explain how <code>this</code> works",id:"-explain-how-this-works",children:[]},{value:"\ud83d\udd38 Explain how prototypal inheritance works.",id:"-explain-how-prototypal-inheritance-works",children:[]},{value:"\ud83d\udd38 How does prototypal inheritance differ from classical inheritance?",id:"-how-does-prototypal-inheritance-differ-from-classical-inheritance",children:[]},{value:"\ud83d\udd38 What happens when you call a constructor function with the <code>new</code> keyword",id:"-what-happens-when-you-call-a-constructor-function-with-the-new-keyword",children:[]},{value:"\ud83d\udd38 <code>null</code> vs <code>undefined</code>",id:"-null-vs-undefined",children:[]},{value:"\ud83d\udd38 What is a closure, and how/why would you use one?",id:"-what-is-a-closure-and-howwhy-would-you-use-one",children:[]},{value:"\ud83d\udd38 Can you give a useful example of one?",id:"-can-you-give-a-useful-example-of-one",children:[]},{value:"\ud83d\udd38 What are the consideration that we need to avoid while working with closure",id:"-what-are-the-consideration-that-we-need-to-avoid-while-working-with-closure",children:[]},{value:"\ud83d\udd38 What language constructions do you use for iterating over object properties and array items?",id:"-what-language-constructions-do-you-use-for-iterating-over-object-properties-and-array-items",children:[]},{value:"\ud83d\udd38 Can you describe the main difference between the Array.forEach() loop and Array.map() methods and why you would pick one versus the other?",id:"-can-you-describe-the-main-difference-between-the-arrayforeach-loop-and-arraymap-methods-and-why-you-would-pick-one-versus-the-other",children:[]},{value:"\ud83d\udd38 What&#39;s a typical use case for anonymous functions?",id:"-whats-a-typical-use-case-for-anonymous-functions",children:[]},{value:"\ud83d\udd38 What&#39;s the difference between host objects and native objects?",id:"-whats-the-difference-between-host-objects-and-native-objects",children:[]},{value:"\ud83d\udd38 Explain the difference between: <code>function Person(){}</code>, <code>var person = Person()</code>, and <code>var person = new Person()</code>?",id:"-explain-the-difference-between-function-person-var-person--person-and-var-person--new-person",children:[]},{value:"\ud83d\udd38 Explain the differences on the usage of <code>foo</code> between <code>function foo() {}</code> and <code>var foo = function() {}</code>",id:"-explain-the-differences-on-the-usage-of-foo-between-function-foo--and-var-foo--function-",children:[]},{value:"\ud83d\udd38 Can you explain what <code>.call</code> and <code>.apply</code> do? What&#39;s the notable difference between the two?",id:"-can-you-explain-what-call-and-apply-do-whats-the-notable-difference-between-the-two",children:[]},{value:"\ud83d\udd38 Explain <code>Function.prototype.bind</code>",id:"-explain-functionprototypebind",children:[]},{value:"\ud83d\udd38 Arrow function vs Regular function",id:"-arrow-function-vs-regular-function",children:[]},{value:"\ud83d\udd38 <code>ES5</code> vs <code>ES6</code>",id:"-es5-vs-es6",children:[]},{value:"\ud83d\udd38 What&#39;s the difference between <code>feature detection</code>, <code>feature inference</code>, and using the <code>UA string</code>?",id:"-whats-the-difference-between-feature-detection-feature-inference-and-using-the-ua-string",children:[]},{value:"\ud83d\udd38 How does <code>hoisting</code> and <code>scoping</code> works",id:"-how-does-hoisting-and-scoping-works",children:[]},{value:"\ud83d\udd38 What is the difference between a parameter and an argument?",id:"-what-is-the-difference-between-a-parameter-and-an-argument",children:[]},{value:"\ud83d\udd38 Does JavaScript pass by value or by reference?",id:"-does-javascript-pass-by-value-or-by-reference",children:[]},{value:"\ud83d\udd38 Explain <code>Event Delegation</code> or <code>DOM Event Delegation</code>",id:"-explain-event-delegation-or-dom-event-delegation",children:[]},{value:"\ud83d\udd38 What&#39;s the difference between an <code>attribute</code> and a <code>property</code>?",id:"-whats-the-difference-between-an-attribute-and-a-property",children:[]},{value:"\ud83d\udd38 What are the pros and cons of extending built-in JavaScript objects?",id:"-what-are-the-pros-and-cons-of-extending-built-in-javascript-objects",children:[]},{value:"\ud83d\udd38 What is the difference between <code>==</code> and <code>===</code>?",id:"-what-is-the-difference-between--and-",children:[]},{value:"\ud83d\udd38 Explain the same-origin policy with regards to JavaScript.",id:"-explain-the-same-origin-policy-with-regards-to-javascript",children:[]},{value:"\ud83d\udd38 Why is it called a Ternary operator, what does the word <code>Ternary</code> indicate?",id:"-why-is-it-called-a-ternary-operator-what-does-the-word-ternary-indicate",children:[]},{value:"\ud83d\udd38 What is <code>strict mode</code>? What are some of the advantages/disadvantages of using it?",id:"-what-is-strict-mode-what-are-some-of-the-advantagesdisadvantages-of-using-it",children:[]},{value:"\ud83d\udd38 What tools and techniques do you use debugging JavaScript code?",id:"-what-tools-and-techniques-do-you-use-debugging-javascript-code",children:[]},{value:"\ud83d\udd38 What are the different <code>truthy</code> and <code>falsy</code> values in JS",id:"-what-are-the-different-truthy-and-falsy-values-in-js",children:[]},{value:"\ud83d\udd38 Explain the difference between mutable and immutable objects",id:"-explain-the-difference-between-mutable-and-immutable-objects",children:[]},{value:"\ud83d\udd38 Explain the difference between synchronous and asynchronous functions",id:"-explain-the-difference-between-synchronous-and-asynchronous-functions",children:[]},{value:"\ud83d\udd38 What is event loop?",id:"-what-is-event-loop",children:[]},{value:"\ud83d\udd38 What are the differences between variables created using <code>let</code>, <code>var</code> or <code>const</code>?",id:"-what-are-the-differences-between-variables-created-using-let-var-or-const",children:[]},{value:"\ud83d\udd38 What are the differences between ES6 class and ES5 function constructors?",id:"-what-are-the-differences-between-es6-class-and-es5-function-constructors",children:[]},{value:"\ud83d\udd38 Can you offer a use case for the new arrow =&gt; function syntax? How does this new syntax differ from other functions?",id:"-can-you-offer-a-use-case-for-the-new-arrow--function-syntax-how-does-this-new-syntax-differ-from-other-functions",children:[]},{value:"\ud83d\udd38 What advantage is there for using the arrow syntax for a method in a constructor?",id:"-what-advantage-is-there-for-using-the-arrow-syntax-for-a-method-in-a-constructor",children:[]},{value:"\ud83d\udd38 What is the definition of a higher-order function?",id:"-what-is-the-definition-of-a-higher-order-function",children:[]},{value:"\ud83d\udd38 What is <code>IIFE</code> and what are the use case of this?",id:"-what-is-iife-and-what-are-the-use-case-of-this",children:[]},{value:"\ud83d\udd38 Can you give an example for destructuring an object and an array?",id:"-can-you-give-an-example-for-destructuring-an-object-and-an-array",children:[]},{value:"\ud83d\udd38 Can you give an example of generating a string with ES6 Template Literals?",id:"-can-you-give-an-example-of-generating-a-string-with-es6-template-literals",children:[]},{value:"\ud83d\udd38 Can you give an example of a <code>curry function</code> and why this syntax offers an advantage?",id:"-can-you-give-an-example-of-a-curry-function-and-why-this-syntax-offers-an-advantage",children:[]},{value:"\ud83d\udd38 How can you share code between files?",id:"-how-can-you-share-code-between-files",children:[]},{value:"\ud83d\udd38 Why you might want to create static class members?",id:"-why-you-might-want-to-create-static-class-members",children:[]},{value:"\ud83d\udd38 What is the difference between while and do-while loops in JavaScript?",id:"-what-is-the-difference-between-while-and-do-while-loops-in-javascript",children:[]},{value:"\ud83d\udd38 Explain is Execution Context",id:"-explain-is-execution-context",children:[]},{value:"\ud83d\udd38 What is the difference between <code>Object.assign</code> vs <code>Object.clone</code>",id:"-what-is-the-difference-between-objectassign-vs-objectclone",children:[]},{value:"\ud83d\udd38 What is <code>Decorators</code> in javascript and When its suitable to use decorators",id:"-what-is-decorators-in-javascript-and-when-its-suitable-to-use-decorators",children:[]},{value:"\ud83d\udd38 What is Computed properties what us the typical use cases of this",id:"-what-is-computed-properties-what-us-the-typical-use-cases-of-this",children:[]},{value:"\ud83d\udd38 <code>const</code> vs <code>Object.freeze()</code>",id:"-const-vs-objectfreeze",children:[]},{value:"\ud83d\udd38  Null propagation operator / Optional Chaining and Null Coalescing Operator",id:"--null-propagation-operator--optional-chaining-and-null-coalescing-operator",children:[]},{value:"\ud83d\udd38 What is the term <code>Coercion</code> in javascript",id:"-what-is-the-term-coercion-in-javascript",children:[]},{value:"\ud83d\udd38 What is generators and how is it different from function",id:"-what-is-generators-and-how-is-it-different-from-function",children:[]},{value:"\ud83d\udd38 How <code>symbol</code> works",id:"-how-symbol-works",children:[]},{value:"\ud83d\udd38 Explain Function Decomposition",id:"-explain-function-decomposition",children:[]},{value:"\ud83d\udd38 Explain <code>Promise</code>, <code>Promise Chain</code> and <code>Async</code> and <code>Await</code>",id:"-explain-promise-promise-chain-and-async-and-await",children:[]},{value:"\ud83d\udd38 Promise.race vs Promise.all",id:"-promiserace-vs-promiseall",children:[]},{value:"\ud83d\udd38 How Callback function different then Promise and what problem promise can solve",id:"-how-callback-function-different-then-promise-and-what-problem-promise-can-solve",children:[]},{value:"\ud83d\udd38 Pure function, Anonymous and Named function",id:"-pure-function-anonymous-and-named-function",children:[]},{value:"\ud83d\udd38 What is prototype design pattern",id:"-what-is-prototype-design-pattern",children:[]},{value:"\ud83d\udd38 Explain Map vs WeakMap",id:"-explain-map-vs-weakmap",children:[]},{value:"\ud83d\udd38 Explain Set vs WeakSet",id:"-explain-set-vs-weakset",children:[]},{value:"\ud83d\udd38 What is Polyfill and Shim",id:"-what-is-polyfill-and-shim",children:[]},{value:"\ud83d\udd38 Write a polyfill for <code>bind()</code>",id:"-write-a-polyfill-for-bind",children:[]},{value:"\ud83d\udd38 What is polyfill why is that required",id:"-what-is-polyfill-why-is-that-required",children:[]},{value:"\ud83d\udd38 What is Transpiling in JS",id:"-what-is-transpiling-in-js",children:[]},{value:"\ud83d\udd38 Explain Function Borrowing and when it occur or can be implement",id:"-explain-function-borrowing-and-when-it-occur-or-can-be-implement",children:[]},{value:"\ud83d\udd38 typeOf vs instanceOf",id:"-typeof-vs-instanceof",children:[]},{value:"\ud83d\udd38 What is Temporals Dead Zone <code>(TDZ)</code> when it can occur",id:"-what-is-temporals-dead-zone-tdz-when-it-can-occur",children:[]},{value:"\ud83d\udd38 Explain Modules in Javascript",id:"-explain-modules-in-javascript",children:[]},{value:"\ud83d\udd38  How compiler and transpiler are different",id:"--how-compiler-and-transpiler-are-different",children:[]},{value:"\ud83d\udd38  Shallow Copy and Deep Copy",id:"--shallow-copy-and-deep-copy",children:[]},{value:"\ud83d\udd38  Debounce and its advantage",id:"--debounce-and-its-advantage",children:[]},{value:"\ud83d\udd38  Throttling and its advantage",id:"--throttling-and-its-advantage",children:[]},{value:"\ud83d\udd38  How Spider Monkey works",id:"--how-spider-monkey-works",children:[]},{value:"\ud83d\udd38  V8 vs SpiderMonkey",id:"--v8-vs-spidermonkey",children:[]},{value:"\ud83d\udd38  How V8 engine works",id:"--how-v8-engine-works",children:[]},{value:"\ud83d\udd38  Memorization and how do we use that",id:"--memorization-and-how-do-we-use-that",children:[]},{value:"\ud83d\udd38  What is Lodash and why is it useful",id:"--what-is-lodash-and-why-is-it-useful",children:[]},{value:"\ud83d\udd38 Create a standalone function <code>bind</code> that is functionally equivalent to the method <code>Function.prototype.bind</code>.",id:"-create-a-standalone-function-bind-that-is-functionally-equivalent-to-the-method-functionprototypebind",children:[]},{value:"\ud83d\udd38 What is <code>short-circuit evaluation</code> in JavaScript?",id:"-what-is-short-circuit-evaluation-in-javascript",children:[]},{value:"\ud83d\udd38 Explain the difference between a static method and an instance method.",id:"-explain-the-difference-between-a-static-method-and-an-instance-method",children:[]}],p={rightToc:u};function f(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h3",{id:"-are-semicolons-required-in-javascript"},"\ud83d\udd38 Are semicolons required in JavaScript?"),Object(c.b)(l,{mdxType:"Collapsible"},Object(c.b)("div",null,Object(c.b)("p",null,"Semicolons in JavaScript divide the community. Some prefer to use them always, no matter what. Others like to avoid them."),Object(c.b)("p",null,"JavaScript does not strictly require semicolons. When there is a place where a semicolon was needed, it adds it behind the scenes."),Object(c.b)("p",null,"The process that does this is called "," ",Object(c.b)("span",{className:"chip"},"Automatic Semicolon Insertion ")))),Object(c.b)("h3",{id:"-explain-how-this-works"},"\ud83d\udd38 Explain how ",Object(c.b)("inlineCode",{parentName:"h3"},"this")," works"),Object(c.b)(l,{mdxType:"Collapsible"},Object(c.b)("div",null,Object(c.b)("p",null,Object(c.b)("i",null,"Refer "),Object(c.b)("a",{href:"../javascript/modules/module2_object#what-the-hell-is-this-"},"Javascript Object "),"for detail elaboration"),Object(c.b)("p",null,Object(c.b)("i",null,"Refer "),Object(c.b)("a",{href:"https://stackoverflow.com/questions/3127429/how-does-the-this-keyword-work"},"Stackoverflow Post")))),Object(c.b)("h3",{id:"-explain-how-prototypal-inheritance-works"},"\ud83d\udd38 Explain how prototypal inheritance works."),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Refer")," ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"../../javascript/modules/module5_prototype"}),"Javascript Prototype")," for detail elaboration "),Object(c.b)("h3",{id:"-how-does-prototypal-inheritance-differ-from-classical-inheritance"},"\ud83d\udd38 How does prototypal inheritance differ from classical inheritance?"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},"Stackoverflow Post"))," about prototypal and classical inheritance. Highly recommended one ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/2800964/benefits-of-prototypal-inheritance-over-classical/16872315#16872315"}),"https://stackoverflow.com/questions/2800964/benefits-of-prototypal-inheritance-over-classical/16872315#16872315")," "),Object(c.b)("p",null,"Aadit M Shah post on ","[prototype]"," (",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"http://aaditmshah.github.io/why-prototypal-inheritance-matters/#constructors_vs_prototypes"}),"http://aaditmshah.github.io/why-prototypal-inheritance-matters/#constructors_vs_prototypes"),")"),Object(c.b)("h3",{id:"-what-happens-when-you-call-a-constructor-function-with-the-new-keyword"},"\ud83d\udd38 What happens when you call a constructor function with the ",Object(c.b)("inlineCode",{parentName:"h3"},"new")," keyword"),Object(c.b)("p",null,"It does the 4 things"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"It create a new instance for a function. The type of this instance will be an object"),Object(c.b)("li",{parentName:"ol"},"It sets this new object's ",Object(c.b)("inlineCode",{parentName:"li"},"internal"),", ",Object(c.b)("inlineCode",{parentName:"li"},"inaccessible"),", ",Object(c.b)("inlineCode",{parentName:"li"},"[[prototype]]")," (i.e. ",Object(c.b)("strong",{parentName:"li"},"proto"),") "),Object(c.b)("li",{parentName:"ol"},"It makes the ",Object(c.b)("inlineCode",{parentName:"li"},"this")," variable point to the newly created object."),Object(c.b)("li",{parentName:"ol"},"Returns the newly created object")),Object(c.b)("h3",{id:"-null-vs-undefined"},"\ud83d\udd38 ",Object(c.b)("inlineCode",{parentName:"h3"},"null")," vs ",Object(c.b)("inlineCode",{parentName:"h3"},"undefined")),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(c.b)(s.a,{styleClass:"heading-2 no-margin",mdxType:"CB"}," null \ud83d\udeab ")),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(c.b)(s.a,{styleClass:"heading-2 no-margin",mdxType:"CB"},"undefined \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f ")))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"null is simply means zero, empty or nothing"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Undefined means not assigned any value")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"typeof null is ",Object(c.b)("inlineCode",{parentName:"td"},"object")),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"typeof undefined is ",Object(c.b)("inlineCode",{parentName:"td"},"undefined"))))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Refer")," ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"../../javascript/modules/module3_datatypes/#4-null"}),"Detail explanation about ",Object(c.b)("strong",{parentName:"a"},"null")," and ",Object(c.b)("strong",{parentName:"a"},"undefined"))),Object(c.b)("h3",{id:"-what-is-a-closure-and-howwhy-would-you-use-one"},"\ud83d\udd38 What is a closure, and how/why would you use one?"),Object(c.b)("p",null,"A closure is the combination of a function ",Object(c.b)("strong",{parentName:"p"},"bundled together (enclosed)")," with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function\u2019s scope from an inner function. "),Object(c.b)("p",null,"In JavaScript, closures are created every time a function is created, at function creation time."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Closure Scope Chain: Every closure has ",Object(c.b)("inlineCode",{parentName:"strong"},"three")," scopes")),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"Local Scope (Own scope)"),Object(c.b)("li",{parentName:"ol"},"Outer Functions Scope"),Object(c.b)("li",{parentName:"ol"},"Global Scope")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{2}","{2}":!0}),"// global scope\nvar e = 10;\nfunction sum(a){\n  return function(b){\n    return function(c){\n      // outer functions scope\n      return function(d){\n        // local scope\n        return a + b + c + d + e;\n      }\n    }\n  }\n}\n\nconsole.log(sum(1)(2)(3)(4)); // log 20\n")),Object(c.b)("h3",{id:"-can-you-give-a-useful-example-of-one"},"\ud83d\udd38 Can you give a useful example of one?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"closure can be used for function currying"),Object(c.b)("li",{parentName:"ul"},"Situations where you might want to do this are particularly common on the web. Much of the code written in front-end JavaScript is event-based. You define some behavior, and then attach it to an event that is triggered by the user (such as a click or a keypress). The code is attached as a callback (a single function that is executed in response to the event)."),Object(c.b)("li",{parentName:"ul"},"You can emulate private methods with closures. Languages such as Java allow you to declare methods as private but JavaScript does not provide a native way of doing this, but it is possible to emulate private methods using closures")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var counter = (function() {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n\n    decrement: function() {\n      changeBy(-1);\n    },\n\n    value: function() {\n      return privateCounter;\n    }\n  };\n})();\n\nconsole.log(counter.value());  // 0.\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value());  // 2.\n\ncounter.decrement();\nconsole.log(counter.value());  // 1.\n")),Object(c.b)("h3",{id:"-what-are-the-consideration-that-we-need-to-avoid-while-working-with-closure"},"\ud83d\udd38 What are the consideration that we need to avoid while working with closure"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"It is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption"),Object(c.b)("li",{parentName:"ul"},"Its not recommended to use closure inside a loop")),Object(c.b)("h3",{id:"-what-language-constructions-do-you-use-for-iterating-over-object-properties-and-array-items"},"\ud83d\udd38 What language constructions do you use for iterating over object properties and array items?"),Object(c.b)("h3",{id:"-can-you-describe-the-main-difference-between-the-arrayforeach-loop-and-arraymap-methods-and-why-you-would-pick-one-versus-the-other"},"\ud83d\udd38 Can you describe the main difference between the Array.forEach() loop and Array.map() methods and why you would pick one versus the other?"),Object(c.b)("h3",{id:"-whats-a-typical-use-case-for-anonymous-functions"},"\ud83d\udd38 What's a typical use case for anonymous functions?"),Object(c.b)("h3",{id:"-whats-the-difference-between-host-objects-and-native-objects"},"\ud83d\udd38 What's the difference between host objects and native objects?"),Object(c.b)("h3",{id:"-explain-the-difference-between-function-person-var-person--person-and-var-person--new-person"},"\ud83d\udd38 Explain the difference between: ",Object(c.b)("inlineCode",{parentName:"h3"},"function Person(){}"),", ",Object(c.b)("inlineCode",{parentName:"h3"},"var person = Person()"),", and ",Object(c.b)("inlineCode",{parentName:"h3"},"var person = new Person()"),"?"),Object(c.b)("h3",{id:"-explain-the-differences-on-the-usage-of-foo-between-function-foo--and-var-foo--function-"},"\ud83d\udd38 Explain the differences on the usage of ",Object(c.b)("inlineCode",{parentName:"h3"},"foo")," between ",Object(c.b)("inlineCode",{parentName:"h3"},"function foo() {}")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"var foo = function() {}")),Object(c.b)("h3",{id:"-can-you-explain-what-call-and-apply-do-whats-the-notable-difference-between-the-two"},"\ud83d\udd38 Can you explain what ",Object(c.b)("inlineCode",{parentName:"h3"},".call")," and ",Object(c.b)("inlineCode",{parentName:"h3"},".apply")," do? What's the notable difference between the two?"),Object(c.b)("h3",{id:"-explain-functionprototypebind"},"\ud83d\udd38 Explain ",Object(c.b)("inlineCode",{parentName:"h3"},"Function.prototype.bind")),Object(c.b)("h3",{id:"-arrow-function-vs-regular-function"},"\ud83d\udd38 Arrow function vs Regular function"),Object(c.b)("h3",{id:"-es5-vs-es6"},"\ud83d\udd38 ",Object(c.b)("inlineCode",{parentName:"h3"},"ES5")," vs ",Object(c.b)("inlineCode",{parentName:"h3"},"ES6")),Object(c.b)("h3",{id:"-whats-the-difference-between-feature-detection-feature-inference-and-using-the-ua-string"},"\ud83d\udd38 What's the difference between ",Object(c.b)("inlineCode",{parentName:"h3"},"feature detection"),", ",Object(c.b)("inlineCode",{parentName:"h3"},"feature inference"),", and using the ",Object(c.b)("inlineCode",{parentName:"h3"},"UA string"),"?"),Object(c.b)("h3",{id:"-how-does-hoisting-and-scoping-works"},"\ud83d\udd38 How does ",Object(c.b)("inlineCode",{parentName:"h3"},"hoisting")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"scoping")," works"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What is the difference between ",Object(c.b)("inlineCode",{parentName:"li"},"lexical scoping")," and ",Object(c.b)("inlineCode",{parentName:"li"},"dynamic scoping"),"?")),Object(c.b)("h3",{id:"-what-is-the-difference-between-a-parameter-and-an-argument"},"\ud83d\udd38 What is the difference between a parameter and an argument?"),Object(c.b)("h3",{id:"-does-javascript-pass-by-value-or-by-reference"},"\ud83d\udd38 Does JavaScript pass by value or by reference?"),Object(c.b)("h3",{id:"-explain-event-delegation-or-dom-event-delegation"},"\ud83d\udd38 Explain ",Object(c.b)("inlineCode",{parentName:"h3"},"Event Delegation")," or ",Object(c.b)("inlineCode",{parentName:"h3"},"DOM Event Delegation")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What is event delegation and why is it useful? Can you show an example of how to use it?"),Object(c.b)("li",{parentName:"ul"},"Describe ",Object(c.b)("inlineCode",{parentName:"li"},"Event Bubbling")," and ",Object(c.b)("inlineCode",{parentName:"li"},"Event Capturing"))),Object(c.b)("h3",{id:"-whats-the-difference-between-an-attribute-and-a-property"},"\ud83d\udd38 What's the difference between an ",Object(c.b)("inlineCode",{parentName:"h3"},"attribute")," and a ",Object(c.b)("inlineCode",{parentName:"h3"},"property"),"?"),Object(c.b)("h3",{id:"-what-are-the-pros-and-cons-of-extending-built-in-javascript-objects"},"\ud83d\udd38 What are the pros and cons of extending built-in JavaScript objects?"),Object(c.b)("h3",{id:"-what-is-the-difference-between--and-"},"\ud83d\udd38 What is the difference between ",Object(c.b)("inlineCode",{parentName:"h3"},"==")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"==="),"?"),Object(c.b)("h3",{id:"-explain-the-same-origin-policy-with-regards-to-javascript"},"\ud83d\udd38 Explain the same-origin policy with regards to JavaScript."),Object(c.b)("h3",{id:"-why-is-it-called-a-ternary-operator-what-does-the-word-ternary-indicate"},"\ud83d\udd38 Why is it called a Ternary operator, what does the word ",Object(c.b)("inlineCode",{parentName:"h3"},"Ternary")," indicate?"),Object(c.b)("h3",{id:"-what-is-strict-mode-what-are-some-of-the-advantagesdisadvantages-of-using-it"},"\ud83d\udd38 What is ",Object(c.b)("inlineCode",{parentName:"h3"},"strict mode"),"? What are some of the advantages/disadvantages of using it?"),Object(c.b)("h3",{id:"-what-tools-and-techniques-do-you-use-debugging-javascript-code"},"\ud83d\udd38 What tools and techniques do you use debugging JavaScript code?"),Object(c.b)("h3",{id:"-what-are-the-different-truthy-and-falsy-values-in-js"},"\ud83d\udd38 What are the different ",Object(c.b)("inlineCode",{parentName:"h3"},"truthy")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"falsy")," values in JS"),Object(c.b)("h3",{id:"-explain-the-difference-between-mutable-and-immutable-objects"},"\ud83d\udd38 Explain the difference between mutable and immutable objects"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What is an example of an immutable object in JavaScript?"),Object(c.b)("li",{parentName:"ul"},"What are the pros and cons of immutability?"),Object(c.b)("li",{parentName:"ul"},"How can you achieve immutability in your own code?")),Object(c.b)("h3",{id:"-explain-the-difference-between-synchronous-and-asynchronous-functions"},"\ud83d\udd38 Explain the difference between synchronous and asynchronous functions"),Object(c.b)("h3",{id:"-what-is-event-loop"},"\ud83d\udd38 What is event loop?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What is the difference between call stack and task queue?"),Object(c.b)("li",{parentName:"ul"},"Spot the difference between Micro Task Queue and Macro Task Queue")),Object(c.b)("h3",{id:"-what-are-the-differences-between-variables-created-using-let-var-or-const"},"\ud83d\udd38 What are the differences between variables created using ",Object(c.b)("inlineCode",{parentName:"h3"},"let"),", ",Object(c.b)("inlineCode",{parentName:"h3"},"var")," or ",Object(c.b)("inlineCode",{parentName:"h3"},"const"),"?"),Object(c.b)("h3",{id:"-what-are-the-differences-between-es6-class-and-es5-function-constructors"},"\ud83d\udd38 What are the differences between ES6 class and ES5 function constructors?"),Object(c.b)("h3",{id:"-can-you-offer-a-use-case-for-the-new-arrow--function-syntax-how-does-this-new-syntax-differ-from-other-functions"},"\ud83d\udd38 Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from other functions?"),Object(c.b)("h3",{id:"-what-advantage-is-there-for-using-the-arrow-syntax-for-a-method-in-a-constructor"},"\ud83d\udd38 What advantage is there for using the arrow syntax for a method in a constructor?"),Object(c.b)("h3",{id:"-what-is-the-definition-of-a-higher-order-function"},"\ud83d\udd38 What is the definition of a higher-order function?"),Object(c.b)("h3",{id:"-what-is-iife-and-what-are-the-use-case-of-this"},"\ud83d\udd38 What is ",Object(c.b)("inlineCode",{parentName:"h3"},"IIFE")," and what are the use case of this?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What is the reason for wrapping the entire contents of a JavaScript source file in a function that is immediately invoked?")),Object(c.b)("h3",{id:"-can-you-give-an-example-for-destructuring-an-object-and-an-array"},"\ud83d\udd38 Can you give an example for destructuring an object and an array?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What are the benefits of using spread syntax and how is it different from rest syntax?")),Object(c.b)("h3",{id:"-can-you-give-an-example-of-generating-a-string-with-es6-template-literals"},"\ud83d\udd38 Can you give an example of generating a string with ES6 Template Literals?"),Object(c.b)("h3",{id:"-can-you-give-an-example-of-a-curry-function-and-why-this-syntax-offers-an-advantage"},"\ud83d\udd38 Can you give an example of a ",Object(c.b)("inlineCode",{parentName:"h3"},"curry function")," and why this syntax offers an advantage?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What are the different ways to achieve function curry")),Object(c.b)("h3",{id:"-how-can-you-share-code-between-files"},"\ud83d\udd38 How can you share code between files?"),Object(c.b)("h3",{id:"-why-you-might-want-to-create-static-class-members"},"\ud83d\udd38 Why you might want to create static class members?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"How do you create static class in JS")),Object(c.b)("h3",{id:"-what-is-the-difference-between-while-and-do-while-loops-in-javascript"},"\ud83d\udd38 What is the difference between while and do-while loops in JavaScript?"),Object(c.b)("h3",{id:"-explain-is-execution-context"},"\ud83d\udd38 Explain is Execution Context"),Object(c.b)("h3",{id:"-what-is-the-difference-between-objectassign-vs-objectclone"},"\ud83d\udd38 What is the difference between ",Object(c.b)("inlineCode",{parentName:"h3"},"Object.assign")," vs ",Object(c.b)("inlineCode",{parentName:"h3"},"Object.clone")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"How do you clone an object in JavaScript?")),Object(c.b)("h3",{id:"-what-is-decorators-in-javascript-and-when-its-suitable-to-use-decorators"},"\ud83d\udd38 What is ",Object(c.b)("inlineCode",{parentName:"h3"},"Decorators")," in javascript and When its suitable to use decorators"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What is Property decorator")),Object(c.b)("h3",{id:"-what-is-computed-properties-what-us-the-typical-use-cases-of-this"},"\ud83d\udd38 What is Computed properties what us the typical use cases of this"),Object(c.b)("h3",{id:"-const-vs-objectfreeze"},"\ud83d\udd38 ",Object(c.b)("inlineCode",{parentName:"h3"},"const")," vs ",Object(c.b)("inlineCode",{parentName:"h3"},"Object.freeze()")),Object(c.b)("h3",{id:"--null-propagation-operator--optional-chaining-and-null-coalescing-operator"},"\ud83d\udd38  Null propagation operator / Optional Chaining and Null Coalescing Operator"),Object(c.b)("h3",{id:"-what-is-the-term-coercion-in-javascript"},"\ud83d\udd38 What is the term ",Object(c.b)("inlineCode",{parentName:"h3"},"Coercion")," in javascript"),Object(c.b)("h3",{id:"-what-is-generators-and-how-is-it-different-from-function"},"\ud83d\udd38 What is generators and how is it different from function"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"When to use generators ")),Object(c.b)("h3",{id:"-how-symbol-works"},"\ud83d\udd38 How ",Object(c.b)("inlineCode",{parentName:"h3"},"symbol")," works"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Can you explain Symbols and Iterators")),Object(c.b)("h3",{id:"-explain-function-decomposition"},"\ud83d\udd38 Explain Function Decomposition"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Explain Function Composition ")),Object(c.b)("h3",{id:"-explain-promise-promise-chain-and-async-and-await"},"\ud83d\udd38 Explain ",Object(c.b)("inlineCode",{parentName:"h3"},"Promise"),", ",Object(c.b)("inlineCode",{parentName:"h3"},"Promise Chain")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"Async")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"Await")),Object(c.b)("h3",{id:"-promiserace-vs-promiseall"},"\ud83d\udd38 Promise.race vs Promise.all"),Object(c.b)("h3",{id:"-how-callback-function-different-then-promise-and-what-problem-promise-can-solve"},"\ud83d\udd38 How Callback function different then Promise and what problem promise can solve"),Object(c.b)("h3",{id:"-pure-function-anonymous-and-named-function"},"\ud83d\udd38 Pure function, Anonymous and Named function"),Object(c.b)("h3",{id:"-what-is-prototype-design-pattern"},"\ud83d\udd38 What is prototype design pattern"),Object(c.b)("h3",{id:"-explain-map-vs-weakmap"},"\ud83d\udd38 Explain Map vs WeakMap"),Object(c.b)("h3",{id:"-explain-set-vs-weakset"},"\ud83d\udd38 Explain Set vs WeakSet"),Object(c.b)("h3",{id:"-what-is-polyfill-and-shim"},"\ud83d\udd38 What is Polyfill and Shim"),Object(c.b)("h3",{id:"-write-a-polyfill-for-bind"},"\ud83d\udd38 Write a polyfill for ",Object(c.b)("inlineCode",{parentName:"h3"},"bind()")),Object(c.b)("h3",{id:"-what-is-polyfill-why-is-that-required"},"\ud83d\udd38 What is polyfill why is that required"),Object(c.b)("h3",{id:"-what-is-transpiling-in-js"},"\ud83d\udd38 What is Transpiling in JS"),Object(c.b)("h3",{id:"-explain-function-borrowing-and-when-it-occur-or-can-be-implement"},"\ud83d\udd38 Explain Function Borrowing and when it occur or can be implement"),Object(c.b)("h3",{id:"-typeof-vs-instanceof"},"\ud83d\udd38 typeOf vs instanceOf"),Object(c.b)("h3",{id:"-what-is-temporals-dead-zone-tdz-when-it-can-occur"},"\ud83d\udd38 What is Temporals Dead Zone ",Object(c.b)("inlineCode",{parentName:"h3"},"(TDZ)")," when it can occur"),Object(c.b)("h3",{id:"-explain-modules-in-javascript"},"\ud83d\udd38 Explain Modules in Javascript"),Object(c.b)("h3",{id:"--how-compiler-and-transpiler-are-different"},"\ud83d\udd38  How compiler and transpiler are different"),Object(c.b)("h3",{id:"--shallow-copy-and-deep-copy"},"\ud83d\udd38  Shallow Copy and Deep Copy"),Object(c.b)("h3",{id:"--debounce-and-its-advantage"},"\ud83d\udd38  Debounce and its advantage"),Object(c.b)("h3",{id:"--throttling-and-its-advantage"},"\ud83d\udd38  Throttling and its advantage"),Object(c.b)("h3",{id:"--how-spider-monkey-works"},"\ud83d\udd38  How Spider Monkey works"),Object(c.b)("h3",{id:"--v8-vs-spidermonkey"},"\ud83d\udd38  V8 vs SpiderMonkey"),Object(c.b)("h3",{id:"--how-v8-engine-works"},"\ud83d\udd38  How V8 engine works"),Object(c.b)("h3",{id:"--memorization-and-how-do-we-use-that"},"\ud83d\udd38  Memorization and how do we use that"),Object(c.b)("h3",{id:"--what-is-lodash-and-why-is-it-useful"},"\ud83d\udd38  What is Lodash and why is it useful"),Object(c.b)("h3",{id:"-create-a-standalone-function-bind-that-is-functionally-equivalent-to-the-method-functionprototypebind"},"\ud83d\udd38 Create a standalone function ",Object(c.b)("inlineCode",{parentName:"h3"},"bind")," that is functionally equivalent to the method ",Object(c.b)("inlineCode",{parentName:"h3"},"Function.prototype.bind"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function example() {\n  console.log(this)\n}\nconst boundExample = bind(example, { a: true })\nboundExample.call({ b: true }) // logs { a: true }\n")),Object(c.b)("h3",{id:"-what-is-short-circuit-evaluation-in-javascript"},"\ud83d\udd38 What is ",Object(c.b)("inlineCode",{parentName:"h3"},"short-circuit evaluation")," in JavaScript?"),Object(c.b)("h3",{id:"-explain-the-difference-between-a-static-method-and-an-instance-method"},"\ud83d\udd38 Explain the difference between a static method and an instance method."))}f.isMDXComponent=!0},178:function(e,t,n){"use strict";var a=n(0),i=n.n(a);t.a=({children:e,styleClass:t})=>i.a.createElement("p",{className:t},e)}}]);