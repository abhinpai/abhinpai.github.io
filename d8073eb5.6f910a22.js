(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{160:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(7),o=(n(0),n(174)),i=n(179),l={id:"module10_generator",title:"Generator and Iterator \u2699\ufe0f",sidebar_label:"Module 10: Generator"},c={id:"javascript/modules/module10_generator",isDocsHomePage:!1,title:"Generator and Iterator \u2699\ufe0f",description:"1. What are generator and iterator",source:"@site/docs/javascript/modules/m10_generator.md",permalink:"/docs/javascript/modules/module10_generator",lastUpdatedBy:"Abhin Pai",lastUpdatedAt:1594572218,sidebar_label:"Module 10: Generator",sidebar:"docs",previous:{title:"Promises its super cool \ud83d\ude0e",permalink:"/docs/javascript/modules/module9_promise"},next:{title:"Module",permalink:"/docs/javascript/modules/module11_module"}},s=[{value:"Generator functions",id:"generator-functions",children:[{value:"Generator Object Methods and States",id:"generator-object-methods-and-states",children:[]}]},{value:"<code>yield</code> Operators",id:"yield-operators",children:[]},{value:"Iterating Over a Generator",id:"iterating-over-a-generator",children:[]},{value:"Using generators for iterables",id:"using-generators-for-iterables",children:[]},{value:"Generator composition",id:"generator-composition",children:[]},{value:"Closing a Generator",id:"closing-a-generator",children:[]}],b={rightToc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Questions \ud83e\udd14")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("ol",{parentName:"div"},Object(o.b)("li",{parentName:"ol"},"What are generator and iterator"),Object(o.b)("li",{parentName:"ol"},"How generator function is different from regular function"),Object(o.b)("li",{parentName:"ol"},"What denotes a generator function"),Object(o.b)("li",{parentName:"ol"},"What are function and function"),Object(o.b)("li",{parentName:"ol"},"Is the below syntax is right?")),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function* myGenerator() {\n  yield 'Hey there!!';\n}\n")),Object(o.b)("ol",Object(a.a)({parentName:"div"},{start:6}),Object(o.b)("li",{parentName:"ol"},"What is the role of ",Object(o.b)("inlineCode",{parentName:"li"},"yield")),Object(o.b)("li",{parentName:"ol"},"How ",Object(o.b)("inlineCode",{parentName:"li"},"yield")," is different than ",Object(o.b)("inlineCode",{parentName:"li"},"yield*")),Object(o.b)("li",{parentName:"ol"},"What does generator object will contain"),Object(o.b)("li",{parentName:"ol"},"What is generator composition and how can we achieve it?"),Object(o.b)("li",{parentName:"ol"},"How to break a generator")))),Object(o.b)("p",null,"So far we have seen the Javascript function can return an only single value, multiple values in a single object or nothing but have you ever thought that how can one function return multiple values? Is it really possible?"),Object(o.b)("p",null,"Yes, it is possible with the help of ",Object(o.b)("strong",{parentName:"p"},"Generator Functions")),Object(o.b)("p",null,"A generator function can  return multiple values one after other using its ",Object(o.b)("inlineCode",{parentName:"p"},"generator object")),Object(o.b)("h2",{id:"generator-functions"},"Generator functions"),Object(o.b)("hr",null),Object(o.b)("p",null,"To create a generator function we need to suffix a ",Object(o.b)("inlineCode",{parentName:"p"},"function")," keyword with ",Object(o.b)("inlineCode",{parentName:"p"},"*")," something like this ",Object(o.b)("inlineCode",{parentName:"p"},"function*")," which will make a function as a generator "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function* myGenerator() {\n  yield 'Hello Hackers';\n  yield 'Namaste Developers';\n  return 'Hi Beautiful People';\n}\n\n// We can also write a generator function by adding the suffix to the function name.\n// But function* is the recommended one which describe the kind of function is not same  \nfunction *myGenerator() {\n  yield 'Hello Hackers';  \n  yield 'Namaste Developers';\n  return 'Hi Beautiful People';\n}\n")),Object(o.b)("p",null,"Generator functions behave differently from regular ones. When such a function is called, it doesn\u2019t run its code. Instead, it returns a special object, called ",Object(o.b)("inlineCode",{parentName:"p"},"generator object"),", to manage the execution."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function* myGenerator() {\n  yield 'Hello Hackers';\n  yield 'Namaste Developers';\n  return 'Hi Beautiful People';\n}\n\nlet gen = myGenerator();\nconsole.log(gen);   // myGenerator {<suspended>}\n                    // __proto__: Generator\n                    // [[GeneratorLocation]]: VM1873:1\n                    // [[GeneratorStatus]]: \"suspended\"\n                    // [[GeneratorFunction]]: \u0192* myGenerator()\n                    // [[GeneratorReceiver]]: Window\n                    // [[Scopes]]: Scopes[3]\n")),Object(o.b)("p",null,"The main method in the ",Object(o.b)("inlineCode",{parentName:"p"},"generator object")," is ",Object(o.b)("inlineCode",{parentName:"p"},"next()"),". When called, it runs the execution until the nearest ",Object(o.b)("inlineCode",{parentName:"p"},"yield <value>")," statement (value can be omitted, then it\u2019s ",Object(o.b)("inlineCode",{parentName:"p"},"undefined"),"). Then the function execution pauses, and the yielded value is returned to the outer code."),Object(o.b)("p",null,"The result of ",Object(o.b)("inlineCode",{parentName:"p"},"next()")," is always an object with two properties"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"value"),": the yielded value"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"done"),": ",Object(o.b)("inlineCode",{parentName:"li"},"true")," if the function code has finished, otherwise ",Object(o.b)("inlineCode",{parentName:"li"},"false"))),Object(o.b)("h3",{id:"generator-object-methods-and-states"},"Generator Object Methods and States"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"next()"),"  Returns the next value in a generator"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"return()"),"  Returns a value in a generator and finishes the generator"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"throw()"),"  Throws an error and finishes the generator"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"suspended")," Generator has halted execution but has not terminated"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"closed"),"  Generator has terminated by either encountering an error, returning, or iterating through all values")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{8-10}","{8-10}":!0}),"function* myGenerator() {\n  yield 'Hello Hackers';\n  yield 'Namaste Developers';\n  return 'Hi Beautiful People';\n}\n\nlet gen = myGenerator();\nconsole.log(gen.next());  // {value: \"Hello Hackers\", done: false}\nconsole.log(gen.next());  // {value: \"Namaste Developers\", done: false}\nconsole.log(gen.next());  // {value: \"Hi Beautiful People\", done: true}\n")),Object(o.b)("p",null,"In the above code, the generator ",Object(o.b)("inlineCode",{parentName:"p"},"myGenerator")," returns 3 different results ",Object(o.b)("strong",{parentName:"p"},"highlighted one"),", and the in the third log value of ",Object(o.b)("inlineCode",{parentName:"p"},"done")," is ",Object(o.b)("inlineCode",{parentName:"p"},"true")," which means generator notifies that there is no other value left to return. This is the real beauty of the generator"),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Remember")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"A generator will remember the last returned value. When we call next time it will not return the previously returned value instead it will return next value if any value present ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"We can't make anonymous function and arrow function as a generator function if we do so Javascript will throw an error\n",Object(o.b)("em",{parentName:"p"},Object(o.b)("strong",{parentName:"em"},"Function statements require a function name / Unexpected token '*'"))))))),Object(o.b)("h2",{id:"yield-operators"},Object(o.b)("inlineCode",{parentName:"h2"},"yield")," Operators"),Object(o.b)("hr",null),Object(o.b)("p",null,"Generators introduce a new keyword to JavaScript: ",Object(o.b)("inlineCode",{parentName:"p"},"yield"),". ",Object(o.b)("inlineCode",{parentName:"p"},"yield")," can pause a generator function and return the value that follows ",Object(o.b)("inlineCode",{parentName:"p"},"yield"),", providing a lightweight way to iterate through values."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{2-4}","{2-4}":!0}),"function* myGenerator() {\n  yield 'Hello Hackers';\n  yield 'Namaste Developers';\n  return 'Hi Beautiful People';\n}\n")),Object(o.b)("p",null,"Now, when we call ",Object(o.b)("inlineCode",{parentName:"p"},"next()")," on the generator function, it will pause every time it encounters ",Object(o.b)("inlineCode",{parentName:"p"},"yield"),". ",Object(o.b)("inlineCode",{parentName:"p"},"done")," will be set to ",Object(o.b)("inlineCode",{parentName:"p"},"false")," after each yield, indicating that the generator has not finished. Once it encounters a return, or there are no more yields encountered in the function, ",Object(o.b)("inlineCode",{parentName:"p"},"done")," will flip to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", and the generator will be finished."),Object(o.b)("h2",{id:"iterating-over-a-generator"},"Iterating Over a Generator"),Object(o.b)("hr",null),Object(o.b)("p",null,"Generators are iterators which means we can loop over the generator methods"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{8-10}","{8-10}":!0}),"function* myGenerator() {\n  yield 'Hello Hackers';\n  yield 'Namaste Developers';\n  return 'Hi Beautiful People';\n}\n\nlet gen = myGenerator();\nfor (let value of gen) {\n  console.log(value); // Hello Hackers, Namaste Developers\n}\n")),Object(o.b)("p",null,"If you see the above code result it will return only first two value but it hasn't returned third value that is ",Object(o.b)("strong",{parentName:"p"},"Hi Beautiful People")),Object(o.b)("p",null,"It\u2019s because ",Object(o.b)("inlineCode",{parentName:"p"},"for..of")," iteration ignores the last value, when ",Object(o.b)("inlineCode",{parentName:"p"},"done: true"),". So, if we want all results to be shown by ",Object(o.b)("inlineCode",{parentName:"p"},"for..of"),", we must return them with yield"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{8-10}","{8-10}":!0}),"function* myGenerator() {\n  yield 'Hello Hackers';\n  yield 'Namaste Developers';\n  yield 'Hi Beautiful People';\n}\n\nlet gen = myGenerator();\nfor (let value of gen) {\n  console.log(value); // Hello Hackers, Namaste Developers, Hi Beautiful People\n}\n")),Object(o.b)("p",null,"As generators are iterable, we can call all related functionality, e.g. the ",Object(o.b)("inlineCode",{parentName:"p"},"spread syntax ...")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function* myGenerator() {\n  yield 'Hackers';\n  yield 'Developers';\n  yield 'Beautiful People';\n}\n\nlet result = ['Hi', ...myGenerator()];\nconsole.log(result); // [\"Hi\", \"Hackers\", \"Developers\", \"Beautiful People\"]\n")),Object(o.b)("p",null,"In the code above, ",Object(o.b)("strong",{parentName:"p"},"...myGenerator()")," turns the iterable generator object into an array of items. to know more how that works read about ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"module7_destruct/#spread-operator"}),"spread and rest syntax")),Object(o.b)("h2",{id:"using-generators-for-iterables"},"Using generators for iterables"),Object(o.b)("hr",null),Object(o.b)("p",null,"Let's see with one sample code of generator for iterables"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let range = {\n  from: 1,\n  to: 5,\n\n  // for..of range calls this method once in the very beginning\n  [Symbol.iterator]() {\n    // ...it returns the iterator object:\n    // onward, for..of works only with that object, asking it for next values\n    return {\n      current: this.from,\n      last: this.to,\n\n      // next() is called on each iteration by the for..of loop\n      next() {\n        // it should return the value as an object {done:.., value :...}\n        if (this.current <= this.last) {\n          return { done: false, value: this.current++ };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  },\n};\n\n// iteration over range returns numbers from range.from to range.to\nconsole.log([...range]); // 1,2,3,4,5\n")),Object(o.b)("p",null,"We can use a generator function for iteration by providing it as Symbol.iterator."),Object(o.b)("p",null,"We still do have a scope to reduce no of lines"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let range = {\n  from: 1,\n  to: 5,\n\n  *[Symbol.iterator]() {\n    // a shorthand for [Symbol.iterator]: function*()\n    for (let value = this.from; value <= this.to; value++) {\n      yield value;\n    }\n  },\n};\n\nconsole.log([...range]);// 1,2,3,4,5\n")),Object(o.b)("p",null,"That works, because ",Object(o.b)("inlineCode",{parentName:"p"},"range[Symbol.iterator]()")," now returns a generator, and generator methods are exactly what ",Object(o.b)("inlineCode",{parentName:"p"},"for..of")," expects. it has a ",Object(o.b)("inlineCode",{parentName:"p"},".next()")," method that returns values in the form ",Object(o.b)("inlineCode",{parentName:"p"},"{value: ..., done: true/false}")),Object(o.b)("h2",{id:"generator-composition"},"Generator composition"),Object(o.b)("hr",null),Object(o.b)("p",null,"Generator composition is a special feature of generators that allows to transparently ",Object(o.b)("strong",{parentName:"p"},"embed")," generators in each other"),Object(o.b)("p",null,"For instance, we have a function that generates a sequence of numbers:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function* generateSequence(start, end) {\n  for (let i = start; i <= end; i++) yield i;\n}\n")),Object(o.b)("p",null,"Now we\u2019d like to reuse it to generate a more complex sequence"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"First, digits 0..9 (with character codes 48\u202657),"),Object(o.b)("li",{parentName:"ul"},"followed by uppercase alphabet letters A..Z (character codes 65\u202690)"),Object(o.b)("li",{parentName:"ul"},"followed by lowercase alphabet letters a..z (character codes 97\u2026122")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function* generateSequence(start, end) {\n  for (let i = start; i <= end; i++) yield i;\n}\n\nfunction* generatePasswordCodes() {\n\n  // 0..9\n  yield* generateSequence(48, 57);\n\n  // A..Z\n  yield* generateSequence(65, 90);\n\n  // a..z\n  yield* generateSequence(97, 122);\n\n}\n\nlet str = '';\n\nfor(let code of generatePasswordCodes()) {\n  str += String.fromCharCode(code);\n}\n\nconsole.log(str); // 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"yield*")," directive delegates the execution to another generator. This term means that ",Object(o.b)("inlineCode",{parentName:"p"},"yield* gen")," iterates over the generator ",Object(o.b)("inlineCode",{parentName:"p"},"gen")," and transparently forwards its yields outside. As if the values were yielded by the outer generator."),Object(o.b)("p",null,"The result is the same as if we inlined the code from nested generators"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function* generateSequence(start, end) {\n  for (let i = start; i <= end; i++) yield i;\n}\n\nfunction* generatePasswordCodes() {\n\n  // yield* generateSequence(48, 57);\n  for (let i = 48; i <= 57; i++) yield i;\n\n  // yield* generateSequence(65, 90);\n  for (let i = 65; i <= 90; i++) yield i;\n\n  // yield* generateSequence(97, 122);\n  for (let i = 97; i <= 122; i++) yield i;\n\n}\n\nlet str = '';\n\nfor(let code of generatePasswordCodes()) {\n  str += String.fromCharCode(code);\n}\n\nconsole.log(str); // 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},Object(o.b)("strong",{parentName:"em"},"Note:")," The above code snippet is taken from Javascript info")),Object(o.b)("h2",{id:"closing-a-generator"},"Closing a Generator"),Object(o.b)("hr",null),Object(o.b)("p",null,"As we've seen, a generator can have its ",Object(o.b)("inlineCode",{parentName:"p"},"done")," property set to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," and it's status set to closed by iterating through all its values. There are two additional ways to immediately cancel a generator: with the ",Object(o.b)("inlineCode",{parentName:"p"},"return()")," method, and with the ",Object(o.b)("inlineCode",{parentName:"p"},"throw()")," method."),Object(o.b)("p",null,"With ",Object(o.b)("inlineCode",{parentName:"p"},"return()"),", the generator can be terminated at any point, just as if a return statement had been in the function body. You can pass an argument into ",Object(o.b)("inlineCode",{parentName:"p"},"return()"),", or leave it blank for an undefined value."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{8-10}","{8-10}":!0}),"function* myGenerator() {\n  yield 'Hello Hackers';\n  yield 'Namaste Developers';\n  return 'Hi Beautiful People';\n}\n\nlet gen = myGenerator();\nconsole.log(gen.next());  // {value: \"Hello Hackers\", done: false}\nconsole.log(gen.return ());  // {value: undefined, done: true}\nconsole.log(gen.next());  // {value: undefined, done: true}\n")),Object(o.b)("p",null,"The first ",Object(o.b)("inlineCode",{parentName:"p"},"next()")," will give us ",Object(o.b)("strong",{parentName:"p"},"'Hello Hackers'"),", with ",Object(o.b)("inlineCode",{parentName:"p"},"done")," set to ",Object(o.b)("strong",{parentName:"p"},"false"),". If we invoke a ",Object(o.b)("inlineCode",{parentName:"p"},"return()")," method on the Generator object right after that, we'll now get the passed value and done set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),". Any additional call to ",Object(o.b)("inlineCode",{parentName:"p"},"next()")," will give the default completed generator response with an ",Object(o.b)("inlineCode",{parentName:"p"},"undefined")," value."),Object(o.b)(i.a,{styleClass:"heading-1",mdxType:"CustomText"},"Reference"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://javascript.info/generators"}),"Javascript Info")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://dev.to/lydiahallie/javascript-visualized-generators-and-iterators-e36"}),"Visual representation by Lydia Hallie")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://ponyfoo.com/articles/es6-iterators-in-depth"}),"Pony Foo"))))}u.isMDXComponent=!0},174:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=b(n),p=a,m=u["".concat(i,".").concat(p)]||u[p]||d[p]||o;return n?r.a.createElement(m,l(l({ref:t},s),{},{components:n})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},179:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=({children:e,styleClass:t})=>r.a.createElement("p",{className:t},e)}}]);