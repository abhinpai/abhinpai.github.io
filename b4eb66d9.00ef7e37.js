(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{155:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(6),i=a(0),o=a.n(i),l=a(158);var b=({children:e,styleClass:t})=>o.a.createElement("p",{className:t},e),s={id:"module3_datatypes",title:"Does type matters \ud83e\udd14",sidebar_label:"Module 3: Data Types",description:"Data types description"},c={id:"javascript/modules/module3_datatypes",title:"Does type matters \ud83e\udd14",description:"Data types description",source:"@site/docs/javascript/modules/m3_datatypes.md",permalink:"/docs/javascript/modules/module3_datatypes",lastUpdatedBy:"Abhin Pai",lastUpdatedAt:1594114715,sidebar_label:"Module 3: Data Types",sidebar:"docs",previous:{title:"Hello I am an Object \ud83d\udc4b",permalink:"/docs/javascript/modules/module2_object"},next:{title:"Function",permalink:"/docs/javascript/modules/module4_function"}},p=[{value:"Primitive Datatype",id:"primitive-datatype",children:[{value:"1. Boolean",id:"1-boolean",children:[]},{value:"2. Number",id:"2-number",children:[]},{value:"3. BigInt",id:"3-bigint",children:[]},{value:"4. Null",id:"4-null",children:[]},{value:"5. Undefined",id:"5-undefined",children:[]},{value:"6. String",id:"6-string",children:[]},{value:"7. Symbol",id:"7-symbol",children:[]}]},{value:"Non-Primitive Datatype",id:"non-primitive-datatype",children:[{value:"1. Array",id:"1-array",children:[]}]},{value:"Template Literals - Expression Interpolation",id:"template-literals---expression-interpolation",children:[]}],m={rightToc:p};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Questions \ud83e\udd14")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("ol",{parentName:"div"},Object(l.b)("li",{parentName:"ol"},"Does JS have any type or is it strongly typed?"),Object(l.b)("li",{parentName:"ol"},"What are the primitive and non-primitive data types?"),Object(l.b)("li",{parentName:"ol"},"What is the difference between global.isFinite and Number.isFinite?"),Object(l.b)("li",{parentName:"ol"},"What is difference between global.parseInt/parseFloat and Number.parseInt/parseFloat?"),Object(l.b)("li",{parentName:"ol"},Object(l.b)("inlineCode",{parentName:"li"},"null")," vs ",Object(l.b)("inlineCode",{parentName:"li"},"undefined")),Object(l.b)("li",{parentName:"ol"},"What is an array and its methods?"),Object(l.b)("li",{parentName:"ol"},"What is a string and its methods?"),Object(l.b)("li",{parentName:"ol"},"Template Literals in JS or String Interpolation?"),Object(l.b)("li",{parentName:"ol"},"What is the difference between map and foreach"),Object(l.b)("li",{parentName:"ol"},"What are the different ways to iterate over an array?"),Object(l.b)("li",{parentName:"ol"},"How to achieve both stack and queue for an array?"),Object(l.b)("li",{parentName:"ol"},"How can we shuffle array elements?"),Object(l.b)("li",{parentName:"ol"},"Different ways to empty an array"),Object(l.b)("li",{parentName:"ol"},"Remove duplicated from an array"),Object(l.b)("li",{parentName:"ol"},"How do you flatten an array"),Object(l.b)("li",{parentName:"ol"},"What are the different ways to merge and concat an array? "),Object(l.b)("li",{parentName:"ol"},"What is a symbol and what is the benefit of using ",Object(l.b)("inlineCode",{parentName:"li"},"symbol"))))),Object(l.b)("p",null,"Yes, type matters a lot in all of the programming languages. which is an identity to a variable."),Object(l.b)("p",null,"There is an overall 8 different datatype present in Javascript which is further divided into primitive and non-primitive"),Object(l.b)("h2",{id:"primitive-datatype"},"Primitive Datatype"),Object(l.b)("hr",null),Object(l.b)("p",null,"There are 7 primitive data types and these datatypes are immutable"),Object(l.b)("h3",{id:"1-boolean"},"1. Boolean"),Object(l.b)("p",null,"Boolean is just true and false like any other programming language"),Object(l.b)("h3",{id:"2-number"},"2. Number"),Object(l.b)("p",null,"\ud83d\udd38 Numbers represent both integer and floating value along with this two there are many other types like"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Infinity")," represent mathematical \u267e\ufe0f which is special value greater than any number"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(1/0); // infinity\nconsole.log(Infinity); // Infinity\n")),Object(l.b)("p",null,"\ud83d\udd38",Object(l.b)("inlineCode",{parentName:"p"},"NaN")," (Not a Number) is sticky, If any mathematical operation breaks it will return NaN"),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Mathematical operations are safe")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Doing Math is safe in Js. We can divide 1/0, treat non-numeric string or number to the expression, the script will never not with a fatal error (die). At worst case, you can get NaN as a  result"))),Object(l.b)(b,{styleClass:"primary-bold-head",mdxType:"CustomText"},"Number Extension Methods"),Object(l.b)("h4",{id:"-binary-and-octal-literals"},"\ud83d\udd38 Binary and Octal Literals"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(parseInt(101, 2)); // 5\nconsole.log(parseInt(111, 3)); // 13\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"0b")," or ",Object(l.b)("inlineCode",{parentName:"p"},"0B")," prefix to number represent binary integer literals"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(parseInt(0b001)); // 1\nconsole.log(parseInt(0B111)); // 7\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"0o")," or ",Object(l.b)("inlineCode",{parentName:"p"},"0O")," prefix to number represent octal integer literals"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(parseInt(0o001)); // 1\nconsole.log(parseInt(0O111)); // 7\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"0x")," or ",Object(l.b)("inlineCode",{parentName:"p"},"0X")," prefix to number represent hexadecimal integer literals"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(parseInt(0x0ff)); // 255\nconsole.log(parseInt(0Xf00)); // 3840\n")),Object(l.b)("h4",{id:"-numberisfinite"},"\ud83d\udd38 Number.isFinite"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"Number.isFinite(NaN); // False\nNumber.isFinite(Infinity); // False\nNumber.isFinite(-Infinity); // False\nNumber.isFinite(1/0); // True\n")),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"global.isFinite Vs Number.isFinite ")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"When we execute global.isFinite it internally concise to Number.isFinite and does the same job\nsame for parseInt and parseFloat"))),Object(l.b)("h4",{id:"-numberparseint"},"\ud83d\udd38 Number.parseInt"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(Number.parseInt(0b001)); // 1\nconsole.log(Number.parseInt(0B111)); // 7\n")),Object(l.b)("h4",{id:"-numberparsefloat"},"\ud83d\udd38 Number.parseFloat"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(Number.parseFloat(0b001)); // 1\nconsole.log(Number.parseFloat(0B111)); // 7\n")),Object(l.b)("h4",{id:"-numberisinteger"},"\ud83d\udd38 Number.isInteger"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(Number.isInteger(Infinite)); // False\nconsole.log(Number.isInteger(-1000)); // True\n")),Object(l.b)("h4",{id:"-numberepsilon"},"\ud83d\udd38 Number.EPSILON"),Object(l.b)("p",null,"This is a literally small number. "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// Default EPSILON Value\nNumber.EPSILON // 2.220446049250313e-16\n\nNumber.EPSILON.toFixed(20); // "0.00000000000000022204"\n')),Object(l.b)("h3",{id:"3-bigint"},"3. BigInt"),Object(l.b)("p",null,"Number type can not allow value larger than (2^53-1) and lesser than -(2^53-1) for this BigInt is the rescuer. "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const bigInt = 12345678901234567890n; // 'n' at the end represent bigint\n")),Object(l.b)("h3",{id:"4-null"},"4. Null"),Object(l.b)("p",null,"Null is a special value that doesn't belong to any of the types. Its separate type altogether.\nWhich simply represents zero, empty, or nothing."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"In javascript ",Object(l.b)("inlineCode",{parentName:"p"},"null")," is a ",Object(l.b)("strong",{parentName:"p"},"Existing Object")," and doesn't lead to ",Object(l.b)("strong",{parentName:"p"},"Null Pointer Exception"))),Object(l.b)("h3",{id:"5-undefined"},"5. Undefined"),Object(l.b)("p",null,"Undefined in like a null which stands out of the group. Undefined means ",Object(l.b)("strong",{parentName:"p"},"not assigned any value")),Object(l.b)("p",null,"If any variable is declared and used that variable without assigning any value that that will return undefined"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let scientist;\nconsole.log(scientist); // undefined\n")),Object(l.b)("p",null,"Null and undefined both are primitive and falsy value"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let astronomer = null;\nconsole.log(typeOf(astronomer)); // object\n\nlet scientist;\nconsole.log(typeOf(scientist)); // undefined\n")),Object(l.b)("p",null,"Null and undefined both are different type but share some similar functionality"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"console.log(null == undefined); // true\n\nlet scientist;\nconsole.log(null !== undefined); // true\n")),Object(l.b)("p",null,"double equal test for the loose equality and perform ",Object(l.b)("inlineCode",{parentName:"p"},"type coercion"),"."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Javascript is both dynamically typed language meaning its strongly and weakly typed game. And all the master game is being played by ",Object(l.b)("inlineCode",{parentName:"p"},"COERCION"),". This is kind of debatable topic")),Object(l.b)("h3",{id:"6-string"},"6. String"),Object(l.b)("p",null,"A string datatype is the most commonly used datatype to store textual data. In javascript, there is no separate type for single character ",Object(l.b)("inlineCode",{parentName:"p"},"char")," like any other programming language."),Object(l.b)(b,{styleClass:"primary-bold-head",mdxType:"CustomText"},"String Extension Methods"),Object(l.b)("h4",{id:"-charat"},"\ud83d\udd38 charAt"),Object(l.b)("p",null,"Return character for a given index (subscript) value ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-touppercase"},"\ud83d\udd38 toUpperCase"),Object(l.b)("p",null,"Convert sting to uppercase ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-tolowercase"},"\ud83d\udd38 toLowerCase"),Object(l.b)("p",null,"Convert string to lowercase ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-indexof"},"\ud83d\udd38 indexOf"),Object(l.b)("p",null,"Get the index of given character from the beginning of the string  ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-lastindexof"},"\ud83d\udd38 lastIndexOf"),Object(l.b)("p",null,"Get the index of given character from the end of the string  ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-include"},"\ud83d\udd38 include"),Object(l.b)("p",null,"Check if string include given string or not and return true or false ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-startwith"},"\ud83d\udd38 startWith"),Object(l.b)("p",null,"Check if any string starts with given string or not and return true or false ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-endswith"},"\ud83d\udd38 endsWith"),Object(l.b)("p",null,"Check if any string ends with given string or not and return true or false ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-slice"},"\ud83d\udd38 slice"),Object(l.b)("p",null,"Break the string based on given character and return an array ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-substring"},"\ud83d\udd38 subString"),Object(l.b)("p",null,"Return part of the string ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-codepointat"},"\ud83d\udd38 codePointAt"),Object(l.b)("p",null,"Return code for the character at position ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-framecodepoint"},"\ud83d\udd38 frameCodePoint"),Object(l.b)("p",null,"Create character by its numeric code ",Object(l.b)("br",null)),Object(l.b)("h4",{id:"-padstart"},"\ud83d\udd38 padStart"),Object(l.b)("p",null,"Add space at the beginning of the string based on the given value ",Object(l.b)("br",null)),Object(l.b)("h3",{id:"7-symbol"},"7. Symbol"),Object(l.b)("p",null,"It\u2019s a very peculiar data type. Once you create a ",Object(l.b)("inlineCode",{parentName:"p"},"symbol"),", its value is kept private and for internal use.\nIt represents a ",Object(l.b)("inlineCode",{parentName:"p"},"unique")," identifier."),Object(l.b)("p",null,"One can create a symbol just by calling the Symbol() global factory function and upon creation, we can give the symbol a description (also called a symbol name)"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const hero = Symbol(); // Create a symbol\nlet id = Symbol("id"); // symbol(id) with provided symbol name\n')),Object(l.b)("p",null,"Symbols are guaranteed to be unique. Even if we create many symbols with the same description, they are different values. The description is just a label that doesn\u2019t affect anything."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const hero1 = Symbol();\nconst hero2 = Symbol();\n\nconsole.log(Symbol() === Symbol()); // false\nconsole.log(hero1 === hero2); // false\n")),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"Remember")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Most values in JavaScript support implicit conversion to a string. For instance, we can alert almost any value, and it will work. Symbols are special. They don\u2019t auto-convert."),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let id = Symbol("id");\nalert(id); // TypeError: Cannot convert a Symbol value to a string\n')),Object(l.b)("p",{parentName:"div"},"That\u2019s a \u201clanguage guard\u201d against messing up because strings and symbols are fundamentally different and should not accidentally convert one into another."),Object(l.b)("p",{parentName:"div"},"If we want to show a symbol, we need to explicitly call .toString() on it"),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let id = Symbol("id");\nalert(id.toString()); // Symbol(id)\n')),Object(l.b)("p",{parentName:"div"},"Or get ",Object(l.b)("inlineCode",{parentName:"p"},"symbol.description")," property to show the description only"),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let id = Symbol("id");\nalert(id.description); // id\n')))),Object(l.b)("h4",{id:"hidden-properties-of-symbol"},"Hidden properties of symbol"),Object(l.b)("p",null,"Symbols allow us to create the ",Object(l.b)("inlineCode",{parentName:"p"},"hidden")," properties of an object, that no other part of code can accidentally access or overwrite."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let user = { name: "John" };\n\nlet id = Symbol("id");\n\nuser[id] = 1;\n\nalert( user[id] ); // we can access symbol as a key\n')),Object(l.b)("h4",{id:"whats-the-benefit-of-using-symbolid-over-a-string-id"},'What\u2019s the benefit of using Symbol("id") over a string "id"?'),Object(l.b)("p",null,"The best benefit is to avoid the name clash since symbol creates a new instance even with the same name we can eliminate the risk of name collision and these hidden properties can be used for the internal functionality purpose."),Object(l.b)("p",null,"Consider you have a user object which is used by much other class in your project but you want to add one more key with the same property present in a user object you can achieve that with the symbol. "),Object(l.b)("p",null,"This is also called ",Object(l.b)("inlineCode",{parentName:"p"},"symbol literal")," for an object"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let user = { name: "Abhin Pai" };\nuser.name = "Abhin"; // it will override the previous value i.e Abhin Pai \n\nlet name = Symbol("name");\nuser[name] = "Abhin"; // Created new hidden property with same name\n\nconsole.log(user); // {name: "Abhin", Symbol(name): "Abhin"}\n')),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"Remember")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Symbols are not enumerated, which means that they do not get included in a for..of or for..in loop ran upon an object.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Symbols are not part of the Object.keys() or Object.getOwnPropertyNames() result.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can access all the symbols assigned to an object using the Object.getOwnPropertySymbols() method."),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let user = { name: "John" };\nlet id = Symbol("id");\n\nuser[id] = 1;\n\nObject.getOwnPropertySymbols(user); // [Symbol(id)]\n')))))),Object(l.b)("h4",{id:"global-symbol"},"Global Symbol"),Object(l.b)("p",null,'Usually, all symbols are different, even if they have the same name. But sometimes we want same-named symbols to be the same entities. For instance, different parts of our application want to access symbol "name" meaning exactly the same property.'),Object(l.b)("p",null,"To achieve that, there exists a global symbol registry. We can create symbols in it and access them later, and it guarantees that repeated accesses by the same name return exactly the same symbol."),Object(l.b)("p",null,"In order to read (create if absent) a symbol from the registry, use Symbol.for(key)."),Object(l.b)("p",null,"This checks the global registry if there is a symbol described by a key then it will return else it will create a new one by the given key in the registry and return it "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// read from the global registry\nlet name = Symbol.for("name"); // if the symbol did not exist, it is created\n\n// read it again (maybe from another part of the code)\nlet myName = Symbol.for("name");\n\nconsole.log( id === idAgain ); // true\n')),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"GLobal Symbol")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"Symbols inside the registry are called global symbols. If we want an application-wide symbol, accessible everywhere in the code \u2013 that\u2019s what they are for."))),Object(l.b)("p",null,"There are various other ",Object(l.b)("inlineCode",{parentName:"p"},"symbol")," method which serves different purposes"),Object(l.b)("h4",{id:"-symbolkeyfor"},"* Symbol.keyFor"),Object(l.b)("p",null,"Not only Symbol.for(key) returns a symbol by name, but there\u2019s a reverse call: Symbol.keyFor(sym), that does the reverse: returns a name by a global symbol"),Object(l.b)("h4",{id:"-symbolhasinstance"},"* Symbol.hasInstance"),Object(l.b)("h4",{id:"-symbolisconcatspreadable"},"* Symbol.isConcatSpreadable"),Object(l.b)("h4",{id:"-symboliterator"},"* Symbol.iterator"),Object(l.b)("h4",{id:"-symboltoprimitive"},"* Symbol.toPrimitive"),Object(l.b)("h2",{id:"non-primitive-datatype"},"Non-Primitive Datatype"),Object(l.b)("hr",null),Object(l.b)("p",null,"Apart from 7 primitive datatype everything else is an Object in javascript ",Object(l.b)("br",null),"\n",Object(l.b)("strong",{parentName:"p"},"Ex:")," Array, function, Object, Set, Regexp etc are Object"),Object(l.b)("h3",{id:"1-array"},"1. Array"),Object(l.b)("p",null,"An array is the most commonly used data type in all of the programming languages to store a list of objects."),Object(l.b)(b,{styleClass:"primary-bold-head",mdxType:"CustomText"},"Array Extension Methods"),Object(l.b)("h4",{id:"-arraypush"},"\ud83d\udd38 Array.push"),Object(l.b)("p",null,"Pushing new element at the end of the queue AKA ",Object(l.b)("inlineCode",{parentName:"p"},"enqueue")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let sports = ['\u26f9\ud83c\udffb\u200d\u2642\ufe0f', '\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f'];\nsports.push('\ud83e\udd3e\ud83c\udffb\u200d\u2642\ufe0f');\nconsole.log(sports); // ['\u26f9\ud83c\udffb\u200d\u2642\ufe0f', '\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f', '\ud83e\udd3e\ud83c\udffb\u200d\u2642\ufe0f'];\n")),Object(l.b)("h4",{id:"-arraypop"},"\ud83d\udd38 Array.pop"),Object(l.b)("p",null,"Removing new element at the end of the queue AKA ",Object(l.b)("inlineCode",{parentName:"p"},"dequeue")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let sports = ['\u26f9\ud83c\udffb\u200d\u2642\ufe0f', '\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f'];\nsports.pop();\nconsole.log(sports); // ['\u26f9\ud83c\udffb\u200d\u2642\ufe0f', '\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f'];\n")),Object(l.b)("h4",{id:"-arrayshift"},"\ud83d\udd38 Array.shift"),Object(l.b)("p",null,"Add an object from the front and push all the element"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let sports = ['\u26f9\ud83c\udffb\u200d\u2642\ufe0f', '\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f'];\nsports.shift('\ud83e\udd3e\ud83c\udffb\u200d\u2642\ufe0f');\nconsole.log(sports); // ['\ud83e\udd3e\ud83c\udffb\u200d\u2642\ufe0f', '\u26f9\ud83c\udffb\u200d\u2642\ufe0f', '\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f'];\n")),Object(l.b)("h4",{id:"-arrayunshift"},"\ud83d\udd38 Array.unshift"),Object(l.b)("p",null,"Remove element from the first and shift all the elements one step before"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let sports = ['\u26f9\ud83c\udffb\u200d\u2642\ufe0f', '\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f'];\nsports.unShift();\nconsole.log(sports); // ['\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', '\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', '\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f'];\n")),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Array Fact \ud83d\ude33")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},Object(l.b)("strong",{parentName:"p"},"Fact 1:")," In javascript array can act as both ",Object(l.b)("inlineCode",{parentName:"p"},"Queue")," and ",Object(l.b)("inlineCode",{parentName:"p"},"Stack")," data structure"),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},"If we perform ",Object(l.b)("inlineCode",{parentName:"li"},"shift")," and ",Object(l.b)("inlineCode",{parentName:"li"},"push")," operation then we can achieve ",Object(l.b)("inlineCode",{parentName:"li"},"Queue")),Object(l.b)("li",{parentName:"ul"},"If we perform ",Object(l.b)("inlineCode",{parentName:"li"},"push")," and ",Object(l.b)("inlineCode",{parentName:"li"},"pop")," operation then we can achieve ",Object(l.b)("inlineCode",{parentName:"li"},"Stack"))),Object(l.b)("p",{parentName:"div"},Object(l.b)("strong",{parentName:"p"},"Fact 2:")," Both push and unshift can add multiple items at once"),Object(l.b)("p",{parentName:"div"},Object(l.b)("strong",{parentName:"p"},"Fact 3:")," Internally ",Object(l.b)("inlineCode",{parentName:"p"},"sports[0]")," is nothing but ",Object(l.b)("inlineCode",{parentName:"p"},"object[0]")," since the array is an object everything behind the scene deals with an object. "),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"  let expression = ['\ud83e\udd23','\ud83e\udd73','\ud83d\ude21'];\n  let humanExpression = expression;\n\n  console.log(expression); // ['\ud83e\udd23','\ud83e\udd73','\ud83d\ude21']\n  console.log(humanExpression); // ['\ud83e\udd23','\ud83e\udd73','\ud83d\ude21']\n  console.log(expression === humanExpression); // true\n\n  expression.pop();\n\n  console.log(expression); // ['\ud83e\udd23','\ud83e\udd73']\n  console.log(humanExpression); // ['\ud83e\udd23','\ud83e\udd73']\n")),Object(l.b)("p",{parentName:"div"},"Notice above snippet I declared ",Object(l.b)("inlineCode",{parentName:"p"},"expression")," array and assigned to ",Object(l.b)("inlineCode",{parentName:"p"},"humanExpression")," array and did a comparison and the result is true. Then I removed one element from the ",Object(l.b)("inlineCode",{parentName:"p"},"expression")," array and logged both array and the changes are also reflected in ",Object(l.b)("inlineCode",{parentName:"p"},"humanExpression")," array. This is because when we assign one object to another object both object will refer to the same address "),Object(l.b)("p",{parentName:"div"},Object(l.b)("strong",{parentName:"p"},"Fact 4:")," Since an array is an object we can add a different kind of property to an array as a property"),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let expressions = [\'\ud83e\udd23\',\'\ud83e\udd73\',\'\ud83d\ude21\'];\nexpressions[9999] = "humanExp"; // assigning value to random subscript value\nexpressions.totalEmoji = 3; // create property with arbitrary name\nconsole.log(expressions); // ["\ud83e\udd23", "\ud83e\udd73", "\ud83d\ude21", empty \xd7 9996, "humanExp", totalEmoji: 3]\n')),Object(l.b)("p",{parentName:"div"},"In the log, we can see ",Object(l.b)("inlineCode",{parentName:"p"},"empty x 9996")," since we have added value at position 9999 js engine left the remaining empty positioned value"))),Object(l.b)("h4",{id:"-arrayspice"},"\ud83d\udd38 Array.spice"),Object(l.b)("p",null,"Splice can be used to delete an array element"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let message = ['I', '\u2764\ufe0f', 3000];\ndelete message[0];\nconsole.log(message); // \u2764\ufe0f 3000\nconsole.log(message.length) // 3 WTF \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f  \n")),Object(l.b)("p",null,"In the above code, we created an array, and then we deleted an item from position one but the length of the array is still 3.\nThis is because the ",Object(l.b)("inlineCode",{parentName:"p"},"delete")," keyword will just delete content but space will remain. Which cost the memory hence ",Object(l.b)("inlineCode",{parentName:"p"},"delete")," keyword is not recommended solution to delete any item"),Object(l.b)("p",null,"So to solve this problem we can use ",Object(l.b)("inlineCode",{parentName:"p"},"splice")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let message = ['I', '\u2764\ufe0f', 3000];\nmessage.splice(0,1);\nconsole.log(message); // \u2764\ufe0f 3000\nconsole.log(message.length) // 2 \ud83d\udc4d\ud83c\udffb\n")),Object(l.b)("p",null,"We can also play more with ",Object(l.b)("inlineCode",{parentName:"p"},"splice")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let message = [\'I\', \'\u2764\ufe0f\', 3000];\nmessage.splice(2,1, "India");\nconsole.log(message); // ["I", "\u2764\ufe0f", 3000]\nconsole.log(message) // ["I", "\u2764\ufe0f", "India"]\n')),Object(l.b)("h4",{id:"-arrayconcat"},"\ud83d\udd38 Array.concat"),Object(l.b)("p",null,"To merge two arrays different array into one single array"),Object(l.b)("h4",{id:"-arrayslice"},"\ud83d\udd38 Array.slice"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"slice")," is used to split an array into smaller array chunk"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let hero = ['H','U','L','K'];\nlet removedItem = hero.splice(1,2); \nconsole.log(hero); // ['H', 'K']\nconsole.log(removedItem); // ['U', 'L']\n")),Object(l.b)("p",null,"We can use ",Object(l.b)("inlineCode",{parentName:"p"},"slice")," without an arg to create a copy of an original array without affecting the original one "),Object(l.b)("h4",{id:"-arrayindexof"},"\ud83d\udd38 Array.indexOf"),Object(l.b)("p",null,"Look for an array item based on a given index and return item else it will return -1"),Object(l.b)("h4",{id:"-arraylastindexof"},"\ud83d\udd38 Array.lastIndexOf"),Object(l.b)("p",null,"Same as indexof but Look for an array item from the end and based on a given index and return item else it will return -1"),Object(l.b)("h4",{id:"-arrayincludes"},"\ud83d\udd38 Array.includes"),Object(l.b)("p",null,"Look for a given item in the array and return true if it found else it will return false"),Object(l.b)("h4",{id:"-arrayisarray"},"\ud83d\udd38 Array.isArray"),Object(l.b)("p",null,"Similar to typeOf for an array"),Object(l.b)("h4",{id:"-arraysort"},"\ud83d\udd38 Array.sort"),Object(l.b)("p",null,"Sort the given array item"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let numbers = [1, 15, 2];\nconsole.log(numbers.sort((a,b) => a-b)); // [1, 2, 15] peace \u270c\ufe0f\n")),Object(l.b)("p",null,"Am I lying? \ud83e\udd14 even after sorting it dint sort why? \ud83e\udd2f\nThis is because javascript converts an array element to string for comparison and for sort it in string lexicographic order (Like Dictionary order)"),Object(l.b)("p",null,"to achieve sorting we need to struggle a bit "),Object(l.b)("h4",{id:"-arrayreverse"},"\ud83d\udd38 Array.reverse"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let numbers = [1, 15, 25];\nconsole.log(numbers.reverse(); // [25, 15, 1] \n")),Object(l.b)("h4",{id:"iterate-over-an-array"},"Iterate over an array"),Object(l.b)("h4",{id:"-while-loop"},"\ud83d\udd38 While loop"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"while (success) {\n try();\n}\n")),Object(l.b)("h4",{id:"-for-loop"},"\ud83d\udd38 for loop"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"for(let i=0; i< 10;  i++) {\n  // do some operation\n}\n")),Object(l.b)("h4",{id:"-for-each-loop"},"\ud83d\udd38 for each loop"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let expressions = ['\ud83e\udd23','\ud83e\udd73','\ud83d\ude21'];\nforEach(let expression in expressions) {\n  console.log(expression);\n}\n")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"forEach")," loop does not provide an index of an item")),Object(l.b)("h4",{id:"-map"},"\ud83d\udd38 map"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let expressions = ['\ud83e\udd23','\ud83e\udd73','\ud83d\ude21'];\nlet result = expressions.map((expression, index) => {\n  return {expression, index};\n});\nconsole.log(result) // object {expression:'\ud83e\udd23', index: 0 } ......\n")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"map")," will provide an index of an item")),Object(l.b)("h4",{id:"-reduce"},"\ud83d\udd38 reduce"),Object(l.b)("p",null,"as the name says it reduces the array item and resulting in a single result "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const marks = [87, 98, 55, 67, 70, 59];\nvar total = (memorizedValue, initialValue) => (memorizedValue+initialValue);\nconsole.log(marks.reduce(total)); // 436\n")),Object(l.b)("h4",{id:"-filter"},"\ud83d\udd38 filter"),Object(l.b)("p",null,"To filter the array item based on boolean expression"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const numberList = [87, 98, 55, 67, 70, 59];\nconst getEvenNumbers = (number) => (number%2 ===0);\nconsole.log(numberList.filter(getEvenNumbers)); // [98, 70]\n")),Object(l.b)("h4",{id:"-every"},"\ud83d\udd38 every"),Object(l.b)("p",null,"When we want to check the given condition is satisfied with all array element or not "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const numberList = [-87, 98, 0, Infinity, NaN, 59];\nvar checkPositiveNumber = (number) => number > 0;\nconsole.log(numberList.every(checkPositiveNumber)); // false\n")),Object(l.b)("h4",{id:"-some"},"\ud83d\udd38 some"),Object(l.b)("p",null,"When we want to check the given condition is satisfied with at least some array element or not "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const numberList = [-87, 98, 0, Infinity, NaN, 59];\nvar checkPositiveNumber = (number) => number > 0;\nconsole.log(numberList.some(checkPositiveNumber)); // true\n")),Object(l.b)("h2",{id:"template-literals---expression-interpolation"},"Template Literals - Expression Interpolation"),Object(l.b)("hr",null),Object(l.b)("p",null,"\ud83d\udd38 We can use ",Object(l.b)("inlineCode",{parentName:"p"},"+")," to concat multiple strings to construct a single string "),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let number = '3000';\nlet hero = 'Iron Man';\nconsole.log(\"I love\" + number + \"Says\" + hero); // I Love 3000 Says Iron Man ;\n")),Object(l.b)("p",null,"\ud83d\udd38 To make it more robust we can use ",Object(l.b)("inlineCode",{parentName:"p"},"String Interpolation")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let number = '3000';\nlet hero = 'Iron Man';\nconsole.log(`I love ${number} Says ${hero}`); // I Love 3000 says Iron Man;\n")))}d.isMDXComponent=!0},158:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),c=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=b(e,["components","mdxType","originalType","parentName"]),p=c(a),d=n,u=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return a?r.a.createElement(u,l(l({ref:t},s),{},{components:a})):r.a.createElement(u,l({ref:t},s))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);